  HikariConfig config = new HikariConfig();
        config.setDataSourceClassName("com.mysql.jdbc.jdbc2.optional.MysqlDataSource");
        config.addDataSourceProperty("serverName", plugin.getConfig().MySQL_Host);
        config.addDataSourceProperty("port", plugin.getConfig().MySQL_Port);
        config.addDataSourceProperty("databaseName", plugin.getConfig().MySQL_Database);
        config.addDataSourceProperty("user", plugin.getConfig().MySQL_Username);
        config.addDataSourceProperty("password", plugin.getConfig().MySQL_Password);

        config.addDataSourceProperty("cachePrepStmts", "true");
        config.addDataSourceProperty("alwaysSendSetIsolation", "false");
        config.addDataSourceProperty("cacheServerConfiguration", "true");
        config.addDataSourceProperty("elideSetAutoCommits", "true");
        config.addDataSourceProperty("useLocalSessionState", "true");
        config.addDataSourceProperty("useServerPrepStmts", "true");
        config.addDataSourceProperty("prepStmtCacheSize", "250");
        config.addDataSourceProperty("prepStmtCacheSqlLimit", "2048");
        config.addDataSourceProperty("cacheCallableStmts", "true");

        config.setPoolName("CentrixCore");
        config.setMaximumPoolSize(5);
        config.setMinimumIdle(5);
        config.setIdleTimeout(1500000);
        config.setConnectionTimeout(5000);
        config.setLeakDetectionThreshold(10000);

        config.setConnectionTestQuery("/* CentrixCore ping */ SELECT 1");

        try {
            config.setInitializationFailTimeout(-1);
        } catch (NoSuchMethodError e) {
            config.setInitializationFailFast(false);
        }

        HikariDataSource source = new HikariDataSource(config);